
	<Grunt 시작하기>


https://github.com/demun/FrontEndStudy/blob/master/document/Grunt/

1. 설치
 콘솔 어디서나 실행할 수 있도록 Grunt's Command line interface (CLI) 를 설치한다.
 Grunt-cli의 역할은 그저 Gruntfile 이라는 파일이 있는 위치에 설치된 Grunt를 찾아서 실행하는 것 뿐임.
	npm install -g grunt-cli

2. 프로젝트를 시작
 프로젝트를 시작할 때는 package.json 과 Gruntfile 이라는 파일이 있어야함.
 package.json : 이 파일은 해당 프로젝트를 npm 모듈로 npm에 퍼블리싱할 때 사용하는 메타데이터 저장 파일이다. 프로젝트에 필요한 grunt와 grunt 플러그인들은 이 파일의 devDependencies라는 항목에 나열합니다.
   ==> npm init 명령어로 생성
 Gruntfile : 이 파일의 이름은 Gruntfile.js이거나 Gruntfile.coffee 입니다. task를 설정하거나 정의하고 Grunt 플러그인을 불러오는데 사용합니다
   --> 기본적인 Gruntfile.js 의 예제
	module.exports = function(grunt) {
	  // 가) 프로젝트 환경설정.
	  grunt.initConfig({
	    pkg: grunt.file.readJSON('package.json'),
	    // 플러그인 설정
	  });
	  // 나) 플러그인 로드.
	  // 다) task 실행.
	};

npm install --save-dev grunt 
grunt-autoprefixer 
grunt-concurrent 
grunt-contrib-clean 
grunt-contrib-concat 
grunt-contrib-connect 
grunt-contrib-copy 
grunt-contrib-csslint 
grunt-contrib-cssmin 
grunt-contrib-imagemin 
grunt-contrib-jshint 
grunt-contrib-less 
grunt-contrib-uglify 
grunt-contrib-watch 
grunt-csscomb 
grunt-htmlhint 
grunt-includes 
grunt-newer 
jshint-stylish 
load-grunt-tasks 
time-grunt

이를 한 문장으로 하면...
npm install --save-dev grunt grunt-autoprefixer grunt-concurrent grunt-contrib-clean grunt-contrib-concat grunt-contrib-connect grunt-contrib-copy grunt-contrib-csslint grunt-contrib-cssmin grunt-contrib-imagemin grunt-contrib-jshint grunt-contrib-less grunt-contrib-uglify grunt-contrib-watch grunt-csscomb grunt-htmlhint grunt-includes grunt-newer jshint-stylish load-grunt-tasks time-grunt




기본적으로 Gruntfile.js의 구조는 아래와 같다.

module.exports = function(grunt) {
    require('time-grunt')(grunt);
    require('load-grunt-tasks')(grunt);

    grunt.config.init({
    //또는 grunt.initConfig()({ 메소드와 동일하다.
        pkg: grunt.file.readJSON('package.json'),
        banner: '/*!\n' +
        ' ======================================================================== \n' +
        ' * Project   : <%= pkg.name %>(<%= pkg.description %>) v<%= pkg.version %>\n' +
        ' * Publisher : <%= pkg.make.publisher %> (<%= pkg.make.email %>), (<%= pkg.make.blog %>)\n' +
        ' * Build     : <%= grunt.template.today("yyyy-mm-dd") %>\n' +
        ' * License   : <%= pkg.license.type %> (<%= pkg.license.url %>)\n' +
        ' ======================================================================== \n' +
        ' */\n',

        작업명1: {
            options: {},
            dist: {
                //options: {},
                //cwd: "작업경로"
                src: "작업경로" 또는 파일형식(["*.js"]),
                dest: "목적지경로"
            }
        },
        작업명2: {
            options: {},
            dist: {
                //options: {},
                //cwd: "작업경로"
                src: "작업경로" 또는 파일형식(["*.js"]),
                dest: "목적지경로"
            }
        }
    };  //init 완료

    grunt.registerTask('묶을작업명1', [  // (콘솔: grunt 묶을작업명)
            '작업명1',
            '작업명2'
        ]
    );
    grunt.registerTask('묶을작업명2', [  // (콘솔: grunt 묶을작업명)
            '작업명3',
            '작업명4'
        ]
    );
};


보통 위와 같은 구조로 작성하여, 사용한다.
































